package as3_user_interface_kit.controllers{	import as3_user_interface_kit.events.ViewControllerEvent;	import as3_user_interface_kit.views.View;	/**	 * <code>ViewStack</code>は複数の<code>IViewController</code>を保持し、表示内容の並列遷移を管理します.	 * @author takanosatoshi	 */	public class ViewStackController extends ViewController	{		private var _contents:Array;		protected var _currentIndex:int = -1;		/**		 * コンストラクタ.		 * @param contents		 *		 */		public function ViewStackController(contents:Array)		{			super();			_contents = contents;			if (_contents == null)			{				_contents = new Array();				return;			}		}				override public function viewDidAppear():void		{			super.viewDidAppear();			changeViewStack(0);			view.setNeedDisplay();		}		/**		 * @inheritDoc		 *		 */		override public function viewWillDraw():void		{			if (_currentIndex >= 0)			{				var currentView:View = _contents[_currentIndex].view;				currentView.frame.width = view.frame.width;				currentView.frame.height = view.frame.height;				currentView.setNeedDisplay();			}		}		/**		 * 管理している<code>IViewController</code>の数です.		 * @return		 *		 */		public function get numStacks():int		{			return _contents.length;		}		/**		 * 引数に渡されたインデックスの<code>IViewController</code>を返します.		 * @param i		 * @return		 *		 */		public function getStackAt(i:int):IViewController		{			return _contents[i];		}		/**		 * <code>IViewController</code>をスタックに追加します.		 * @param content		 *		 */		public function addContent(content:IViewController):void		{			_contents.push(content);			if (_currentIndex == -1)				changeViewStack(0);		}		/**		 * <code>IViewController</code>オブジェクトをスタックから削除します.		 * @param index		 *		 */		public function removeContentAt(index:int):void		{			var obj:IViewController = _contents.splice(index, 1)[0] as IViewController;		}		/**		 * 表示する<code>IViewController</code>を切り替えます.		 * @param index 表示する<code>IViewController</code>オブジェクトのインデックス		 */		public function changeViewStack(index:int):void		{			if (_currentIndex == index)				return;						var oldIndex:int = _currentIndex;			_currentIndex = index;						if (oldIndex != -1) // 			{				_contents[oldIndex].addEventListener(ViewControllerEvent.VIEW_CAN_REMOVE_FROM_DISPLAY, viewCanBrRemovedFromDisplay);				view.removeChild(_contents[oldIndex].view);							}			else			{				var v:View = _contents[index].view;				v.frame.width = view.frame.width;				v.frame.height = view.frame.height;				view.addChild(v);			}		}		private function viewCanBrRemovedFromDisplay(e:ViewControllerEvent):void		{			var vc:IViewController = e.target as IViewController;			vc.removeEventListener(ViewControllerEvent.VIEW_CAN_REMOVE_FROM_DISPLAY, viewCanBrRemovedFromDisplay);			var v:View = _contents[_currentIndex].view;			v.frame.width = view.frame.width;			v.frame.height = view.frame.height;			view.addChild(v);		}		/**		 * 表示する<code>IViewController</code>オブジェクトを切り替えます.		 * @param content 表示する<code>IViewController</code>オブジェクト		 *		 */		public function changeViewStackFramObj(content:IViewController):void		{			try			{				view.removeChild(_contents[_currentIndex].view);			}			catch (e:Error)			{			}			var l:int = _contents.length;			for (var i:int = 0; i < l; i++)			{				if (content == _contents[i])				{					view.addChild(content.view);					_currentIndex = i;					view.setNeedDisplay();					return;				}			}		}		/**		 * 指定された<code>IViewController</code>が可視状態かどうかの真偽値を返します.		 * @param index	対象となる<code>IViewController</code>のindex		 * @return		 *		 */		public function isSelected(index:int):Boolean		{			return index == _currentIndex;		}		/**		 * 可視状態の<code>IViewController</code>オブジェクトを返します.		 * @return		 *		 */		public function getSelectedStack():IViewController		{			return _contents[_currentIndex];		}		/**		 * prev()メソッドが実行可能か調べます.		 * @return		 *		 */		public function hasPrev():Boolean		{			return _currentIndex > 0;		}		/**		 * next()メソッドが実行可能か調べます.		 * @return		 *		 */		public function hasNext():Boolean		{			return _currentIndex < _contents.length - 1;		}		/**		 * 一つ前の<code>IViewController</code>へ遷移します.		 *		 */		public function prev():void		{			changeViewStack(_currentIndex - 1);		}		/**		 * 次の<code>IViewController</code>へ遷移します.		 */		public function next():void		{			changeViewStack(_currentIndex + 1);		}	}}