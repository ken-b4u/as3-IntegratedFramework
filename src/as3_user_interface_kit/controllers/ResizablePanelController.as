package as3_user_interface_kit.controllers{	import as3_user_interface_kit.Application;	import as3_user_interface_kit.Frame;		import as3_user_interface_kit.appearances.IPanelSkin;	import as3_user_interface_kit.views.DrawableView;	import as3_user_interface_kit.views.View;		import flash.display.Stage;	import flash.events.Event;	import flash.events.MouseEvent;
	/**	 * 未完成.	 * @private	 * ユーザー操作によるサイズ可変のパネルコンポーネント.	 * @author takanosatoshi	 */	public class ResizablePanelController extends PanelController	{		private var _resizeHandle:View;		private var _dragHandle:View;		private var _stage:Stage;		private var _dragEnable:Boolean = false;		/**		 * コンストラクタ.		 *		 */		public function ResizablePanelController( config:IPanelSkin )		{			super( config );			_stage = Application.getDocumentClass().stage;			// 部品を配置			_dragHandle = new DrawableView();			_dragHandle.alpha = 0;			_dragHandle.frame.set( 0, 0, 10, 30 );			view.addChild( _dragHandle );			view.addChild( closeButton );						_resizeHandle = new View();			_resizeHandle.graphics.lineStyle(1, 0x666666);			_resizeHandle.graphics.moveTo(15, 0);			_resizeHandle.graphics.lineTo(0, 15);			_resizeHandle.graphics.moveTo(15, 5);			_resizeHandle.graphics.lineTo(5, 15);			_resizeHandle.graphics.moveTo(15, 10);			_resizeHandle.graphics.lineTo(10, 15);			_resizeHandle.frame.set(0, 0, 15, 15);			_resizeHandle.buttonMode = _resizeHandle.mouseEnabled = true;			_resizeHandle.backgroundImage = new DrawableView();			_resizeHandle.backgroundImage.alpha = 0;						view.addChild( _resizeHandle );			onResize( null );		}		/**		 * @inheritDoc		 */		override public function viewDidAppear():void		{			super.viewDidAppear();			_dragHandle.addEventListener( MouseEvent.MOUSE_DOWN, onDragStart );			_dragHandle.addEventListener( MouseEvent.MOUSE_UP, stopDrag );			closeButton.addEventListener( MouseEvent.MOUSE_UP, onCloseButtonClicked );			_resizeHandle.addEventListener( MouseEvent.MOUSE_DOWN, startResizing );			_resizeHandle.addEventListener( MouseEvent.MOUSE_UP, stopResizingAndDragging );			_stage.addEventListener( MouseEvent.MOUSE_UP, stopResizingAndDragging );		}		/**		 * @inheritDoc		 */		override public function viewDidDisappear():void		{			super.viewDidDisappear();			_dragHandle.removeEventListener( MouseEvent.MOUSE_DOWN, onDragStart );			_dragHandle.removeEventListener( MouseEvent.MOUSE_UP, stopDrag );			_resizeHandle.removeEventListener( MouseEvent.MOUSE_DOWN, startResizing );			_resizeHandle.removeEventListener( MouseEvent.MOUSE_UP, stopResizingAndDragging );			_stage.removeEventListener( MouseEvent.MOUSE_UP, stopResizingAndDragging );			closeButton.removeEventListener( MouseEvent.MOUSE_UP, onCloseButtonClicked );		}		override public function viewWillDraw():void		{			super.viewWillDraw();			_dragHandle.width = view.frame.width;			_dragHandle.setNeedDisplay();			var viewFrame:Frame = view.frame;			_resizeHandle.frame.x = viewFrame.width - _resizeHandle.width - 5;			_resizeHandle.frame.y = viewFrame.height - _resizeHandle.height - 5;			var closeButtonFrame:Frame = closeButton.frame;			closeButtonFrame.x = viewFrame.width - closeButtonFrame.width - 5;			_resizeHandle.setNeedDisplay();			closeButton.setNeedDisplay();		}		private var _dragOffsetX:Number;		private var _dragOffsetY:Number;		private var _movedX:Number;		private var _movedY:Number;		private function onDragStart( e:MouseEvent ):void		{			_dragOffsetX = view.mouseX;			_dragOffsetY = view.mouseY;			_movedX = _movedY = 0;			view.addEventListener( Event.ENTER_FRAME, moveView );		}		private function moveView( e:Event ):void		{			_movedX = view.mouseX - _movedX;			_movedY = view.mouseY - _movedY;			view.frame.x += _movedX - _dragOffsetX;			view.frame.y += _movedY - _dragOffsetY;			_movedX = _movedY = 0;			view.setNeedDisplay();		}		private function stopDrag( e:MouseEvent ):void		{			view.removeEventListener( Event.ENTER_FRAME, moveView );		}		private function startResizing( e:MouseEvent ):void		{			_dragOffsetX = view.mouseX;			_dragOffsetY = view.mouseY;			view.addEventListener( Event.ENTER_FRAME, onResize );		}		private function stopResizingAndDragging( e:MouseEvent ):void		{			view.removeEventListener( Event.ENTER_FRAME, onResize );		}		private function onResize( e:Event ):void		{			var viewFrame:Frame = view.frame;			view.frame.width += view.mouseX - _dragOffsetX;			view.frame.height += view.mouseY - _dragOffsetY;			_resizeHandle.frame.x = viewFrame.width - _resizeHandle.width - 5;			_resizeHandle.frame.y = viewFrame.height - _resizeHandle.height - 5;			var closeButtonFrame:Frame = closeButton.frame;			closeButtonFrame.x = viewFrame.width - closeButtonFrame.width - 5;			_dragOffsetX = view.mouseX;			_dragOffsetY = view.mouseY;			view.setNeedDisplay();			dispatchEvent( new Event( Event.RESIZE ));		}		private function onCloseButtonClicked( e:MouseEvent ):void		{					}	}}