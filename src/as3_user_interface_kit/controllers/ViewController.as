package as3_user_interface_kit.controllers{	import as3_foundation.dvbinternal;		import as3_user_interface_kit.events.ViewControllerEvent;	import as3_user_interface_kit.views.ModalView;	import as3_user_interface_kit.views.View;		import flash.events.EventDispatcher;	import flash.utils.getDefinitionByName;	import flash.utils.getQualifiedClassName;
	/**	 * <code>ViewController</code>クラスは<code>View</code>とそのサブクラスのコントローラです.	 * <p><code>ViewController</code>は必ずひとつの<code>View</code>（またはそのサブクラス）とペアで使用されます。	 * 保持している<code>View</code>オブジェクトが、swf アプリケーションに表示される時、非表示になる時、表示が更新される時などに、	 * <code>viewDidAppear</code>, <code>viewDidDisappear</code>, <code>viewWillDraw</code> といったメソッドが呼び出されます。	 * そのメソッド内で、イベントリスナの登録/解除やビューコンポーネント独自の処理を行います。</p>	 *	 * @author takanosatoshi	 *	 */	public class ViewController extends EventDispatcher implements IViewController	{		private var _view:View;		private var _navigationController:NavigationController;		private var _parentViewController:IViewController;		private var _viewCanBeRemoved:Boolean = false;				private var _modalView:ModalView;		private var _viewIsBeingRmoved:Boolean;		private var _late:ModalView;				/**		 * コンストラクタ.		 *		 */		public function ViewController()		{			view = new View();		}		/**		 * @inheritDoc		 */		public function viewWillAppear():void		{		}		/**		 * @inheritDoc		 */		public function viewDidAppear():void		{			_view.setNeedDisplay();		}		/**		 * @inheritDoc		 */		public function viewWillDisappear():void		{			dispatchEvent(new ViewControllerEvent(ViewControllerEvent.VIEW_CAN_REMOVE_FROM_DISPLAY));		}		/**		 * @inheritDoc		 */		public function viewDidDisappear():void		{		}		/**		 * @inheritDoc		 */		public function viewWillDraw():void		{		}		/**		 * @inheritDoc		 */		public function get navigationController():NavigationController		{			return _navigationController;		}		/**		 * @inheritDoc		 */		public function set navigationController(navigationController:NavigationController):void		{			_navigationController = navigationController;		}		/**		 * @inheritDoc		 */		public function get parentViewController():IViewController		{			return _parentViewController;		}		/**		 * @inheritDoc		 */		public function set parentViewController(viewController:IViewController):void		{			_parentViewController = viewController;		}				/**		 * モーダルビューを表示します.		 * @param view		 *		 */		public function presentModalView(view:ModalView):void		{			if (hasModalView)			{				_late = view;				dismissModalView();			}			else				presentLate(view);		}				/**		 * 表示中のモーダルビューを消します.		 *		 */		public function dismissModalView():void		{			_modalView.hide();		}				/**		 * @private		 *		 */		dvbinternal function removeModalView():void		{			view.removeChild(_modalView);			_modalView = null;			if (_late)			{				presentLate(_late);				_late = null;			}		}				private function presentLate(view:ModalView):void		{			_modalView = view;			_modalView.viewController = this;			_modalView.controller = new ViewController();			this.view.addChild(_modalView);			_modalView.setNeedDisplay();			_modalView.frame.width = view.frame.width;			_modalView.frame.height = view.frame.height;			_modalView.show();		}				/**		 * 現在モーダルビューを表示しているかどうかの真偽値です.		 * @return		 *		 */		public function get hasModalView():Boolean		{			if (_modalView)				return true;			else				return false;		}				/**		 * モーダルビューを返します.		 * @return		 *		 */		public function getModalView():ModalView		{			return _modalView;		}		/**		 * @inheritDoc		 */		public function get className():String		{			return getQualifiedClassName(this);		}		/**		 * @inheritDoc		 */		public function get classObject():Class		{			return getDefinitionByName(className) as Class;		}		/**		 * @inheritDoc		 */		public function get view():View		{			return _view;		}		/**		 * @inheritDoc		 *		 */		public function set view(view:View):void		{			_view = view;			if (_view.controller != this)				_view.controller = this;		}	}}