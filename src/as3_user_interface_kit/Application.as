package as3_user_interface_kit{	import as3_user_interface_kit.controllers.ViewController;		import flash.display.Sprite;	import flash.display.Stage;	import flash.display.StageAlign;	import flash.display.StageDisplayState;	import flash.display.StageScaleMode;	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.system.ApplicationDomain;	import flash.ui.ContextMenu;	import flash.ui.ContextMenuItem;	import flash.utils.getDefinitionByName;
	import as3_foundation.Timestamp;
	/**	 * Application クラスは、ステージのサイズ、フレームレートなど、Flash コンテンツ全体の設定を扱います.	 */	public class Application extends EventDispatcher	{		private static var stage:Stage;		private static var _documentClass:Sprite;		private static var _wasInit:Boolean = false;		private static var _globalViewController:ViewController;		private static var _applicationFrame:Frame;		private static var _contextMenu:ContextMenu;				private static var _timeStamp:Timestamp;		private static var _externalDomains:Object = {};		/**		 * @private		 */		public function Application()		{			throw new Error("Application のコンストラクタ使えません。");		}		public static function set globalViewController(value:ViewController):void
		{			if (_globalViewController) {				stage.removeChild(_globalViewController.view);			}			
			_globalViewController = value;			_globalViewController.view.frame.set(0, 0, stage.stageWidth, stage.stageHeight);			stage.addChildAt(_globalViewController.view, 0);			resize(null);
		}				public static function addDomain(key:String, domain:ApplicationDomain):void {			_externalDomains[key] = domain;		}				public static function newInstance(className:String, domain:ApplicationDomain = null):* {			var cls:Class;			if (domain) cls = domain.getDefinition(className) as Class;			else cls = getDefinitionByName(className) as Class;			return new cls();		}		public static function addContextMenuItem(item:ContextMenuItem):void		{			_contextMenu.customItems.push(item);		}		public static function get globalViewController():ViewController		{			return _globalViewController;		}		/**		 * アプリケーションの名前と、ドキュメントクラスを与えて初期化します.		 *		 * @param appName アプリケーションの任意の名前です		 * @param documentClass アプリケーションのドキュメントクラスです		 * @see Sprite		 */		public static function initialize(documentClass:Sprite):void		{			_timeStamp = new Timestamp();						_documentClass = documentClass;			stage = _documentClass.stage;			stage.scaleMode = StageScaleMode.NO_SCALE;			stage.align = StageAlign.TOP_LEFT;			//stage.frameRate = 60;			stage.addEventListener(Event.RESIZE, resize);						_wasInit = true;			_applicationFrame = new Frame(0, 0, stage.stageWidth, stage.stageHeight);			_contextMenu = new ContextMenu();			_documentClass.contextMenu = _contextMenu;			resize(null);		}		/**		 * ドキュメントクラスを返します.		 * @return		 *		 */		public static function getDocumentClass():Sprite		{			return _documentClass;		}		/**		 * 初期化済みかどうかの真偽値です.		 * @return		 *		 */		public static function get wasInitialized():Boolean		{			return _wasInit;		}		/**		 * スクリーンを平常状態にします.		 */		public static function normalScreen():void		{			_documentClass.stage.displayState = StageDisplayState.NORMAL;		}		/**		 * フルスクリーンモードにします.		 */		public static function fullScreen():void		{			_documentClass.stage.displayState = StageDisplayState.FULL_SCREEN;		}		/**		 * フレームレート.		 */		public static function get frameRate():int		{			return _documentClass.stage.frameRate;		}		public static function set frameRate(frameRate:int):void		{			_documentClass.stage.frameRate = frameRate;		}		/**		 * ローカルで実行されているかどうかを返します.		 * @return		 *		 */		public static function get runningAtLocal():Boolean		{			var a:Boolean = /https?:\/\/.*?\.localhost\//g.test(_documentClass.stage.loaderInfo.url);			return a || (_documentClass.stage.loaderInfo.url.substr(0, 4) != "http");		}				public static function get url():String {			//var arr:Array = new RegExp(/(.*?:\/\/.*?)\//g).exec(_documentClass.stage.loaderInfo.url);			return _documentClass.stage.loaderInfo.url;		}		/**		 * アプリケーション表示領域の<code>Frame</code>インスタンス.		 * @return		 *		 */		public static function get applicationFrame():Frame		{			_applicationFrame.set(0, 0, _documentClass.stage.stageWidth, _documentClass.stage.stageHeight);			return _applicationFrame;		}		private static function resize(e:Event):void		{			if (_globalViewController)			{				_globalViewController.view.frame.set(0, 0, _documentClass.stage.stageWidth, _documentClass.stage.stageHeight);				_globalViewController.view.setNeedDisplay();			}		}				public static function get timestamp():Timestamp		{			return _timeStamp;		}	}}